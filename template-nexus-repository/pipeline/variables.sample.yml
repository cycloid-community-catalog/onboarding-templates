#
# Cloud Provider
#

{%- if stack_usecase == "aws" %}
# AWS access to use to run terraform. Usually admin account to be able to create AWS Cloud services.

#. aws_cred (required): ((aws))
#+ Amazon credentials containing access key and secret key for Terraform. See value format [here](https://docs.cycloid.io/advanced-guide/integrate-and-use-cycloid-credentials-manager.html#vault-in-the-pipeline)
aws_cred: ((aws))

#. aws_access_key (required): ((aws.access_key))
#+ Amazon AWS access key for Terraform. See value format [here](https://docs.cycloid.io/advanced-guide/integrate-and-use-cycloid-credentials-manager.html#vault-in-the-pipeline)
aws_access_key: ((((aws_cred)).access_key))

#. aws_secret_key (required): ((aws.secret_key))
#+ Amazon AWS secret key for Terraform. See value format [here](https://docs.cycloid.io/advanced-guide/integrate-and-use-cycloid-credentials-manager.html#vault-in-the-pipeline)
aws_secret_key: ((((aws_cred)).secret_key))

#. aws_default_region (required): eu-west-1
#+ Amazon AWS region to use for Terraform.
aws_region: eu-west-1
{%- elif stack_usecase == "azure" %}
# Azure credentials to use to run terraform. Usually admin account to be able to create cloud services.

#. azure_cred (required): ((azure))
#+ The azure credential used to deploy the infrastructure. It contains subscription_id, tenant_id, client_id, and client_secret. See value format [here](https://docs.cycloid.io/advanced-guide/integrate-and-use-cycloid-credentials-manager.html#vault-in-the-pipeline)
azure_cred: ((azure))

#. azure_subscription_id (required): ((azure.subscription_id))
#+ Azure subscription ID to use for Terraform.
azure_subscription_id: ((((azure_cred)).subscription_id))

#. azure_tenant_id (required): ((azure.tenant_id))
#+ Azure tenant ID to use for Terraform.
azure_tenant_id: ((((azure_cred)).tenant_id))

#. azure_client_id (required): ((azure.client_id))
#+ Azure client ID to use for Terraform.
azure_client_id: ((((azure_cred)).client_id))

#. azure_client_secret (required): ((azure.client_secret))
#+ Azure client secret to use for Terraform.
azure_client_secret: ((((azure_cred)).client_secret))

#. azure_location (required): West Europe
#+ Azure location to use for terraform. 
azure_location: "West Europe"
{%- elif stack_usecase == "gcp" %}
#. gcp_credentials_json (required): ((gcp.json_key))
#+ Google Cloud Platform JSON credentials to use for Terraform. See value format [here](https://docs.cycloid.io/advanced-guide/integrate-and-use-cycloid-credentials-manager.html#vault-in-the-pipeline)
gcp_credentials_json: ((gcp.json_key))

#. gcp_project (required): ""
#+ Google Cloud Platform project ID for Terraform.
gcp_project: ""

#. gcp_region (required): "europe-west1"
#+ Google Cloud Platform region to use for Terraform.
gcp_region: "europe-west1"

#. gcp_zone (required): "europe-west1-b"
#+ Google Cloud Platform zone to use for Terraform.
gcp_zone: "europe-west1-b"
{%- endif %}


#
# SSH Keypair to use for newly created instances
#

#. keypair_public (required): ((keypair.ssh_pub))
#+ The public SSH key to connect via SSH to execute the Ansible playbook.
keypair_public: ((keypair.ssh_pub))

#. keypair_private (required): ((keypair.ssh_prv))
#+ The private SSH key to connect via SSH to execute the Ansible playbook.
keypair_private: ((keypair.ssh_prv))


#
# Stack Git repository
#

#. stack_git_repository (required): ($ scs_url $)
#+ Git repository URL containing the stack.
stack_git_repository: ($ scs_url $)

#. stack_git_branch (required): ($ scs_branch $)
#+ Branch to use on the stack Git repository.
stack_git_branch: ($ scs_branch $)
{% if scs_cred_type == "http" %}
#. stack_git_username (required): ((($ scs_cred_path $).username))
#+ Username for HTTP(S) auth when pulling/pushing.
stack_git_username: ((($ scs_cred_path $).username))

#. stack_git_token (required): ((($ scs_cred_path $).password))
#+ Password for HTTP(S) auth when pulling/pushing.
stack_git_token: ((($ scs_cred_path $).password))
{% else %}
#. stack_git_private_key (required): ((($ scs_cred_path $).ssh_key))
#+ SSH key pair to fetch the stack Git repository.
stack_git_private_key: ((($ scs_cred_path $).ssh_key))
{% endif %}
#. stack_terraform_path (required): ($ stack_path $)/terraform/{{ stack_usecase }}
#+ Path of Terraform files in the stack git repository
stack_terraform_path: ($ stack_path $)/terraform/{{ stack_usecase }}

#. stack_ansible_path (required): ($ stack_path $)/ansible
#+ Path of Ansible files in the stack git repository
stack_ansible_path: ($ stack_path $)/ansible


#
# Config Git repository
#

#. config_git_repository (required): ($ cr_url $)
#+ Git repository URL containing the config of the stack.
config_git_repository: ($ cr_url $)

#. config_git_branch (required): ($ cr_branch $)
#+ Branch to use on the config Git repository.
config_git_branch: ($ cr_branch $)
{% if cr_default_cred_type == "http" %}
#. config_git_username (required): ((($ cr_cred_path $).username))
#+ Username for HTTP(S) auth when pulling/pushing.
config_git_username: ((($ cr_cred_path $).username))

#. config_git_token (required): ((($ cr_cred_path $).password))
#+ Password for HTTP(S) auth when pulling/pushing.
config_git_token: ((($ cr_cred_path $).password))
{% else %}
#. config_git_private_key (required): ((($ cr_cred_path $).ssh_key))
#+ SSH key pair to fetch the config Git repository.
config_git_private_key: ((($ cr_cred_path $).ssh_key))
{% endif %}
#. config_terraform_path (required): ($ project $)/terraform/{{ stack_usecase }}/($ environment $)
#+ Path of Terraform files in the config git repository
config_terraform_path: ($ project $)/terraform/{{ stack_usecase }}/($ environment $)

#. config_ansible_path (required): ($ project $)/ansible/environments
#+ Path of Ansible files in the config git repository
config_ansible_path: ($ project $)/ansible/environments


#
# Default variables that shouldn't be changed except if needed
#

#. env (required): ($ environment $)
#+ Name of the project's environment.
env: ($ environment $)

#. project (required): ($ project $)
#+ Name of the project.
project: ($ project $)

#. customer (required): ($ organization_canonical $)
#+ Name of the Cycloid Organization, used as customer variable name.
customer: ($ organization_canonical $)

#. cycloid_api_url (required): https://http-api.cycloid.io
#+ Cycloid API URL.
cycloid_api_url: ($ api_url $)

#. terraform_version (required): '1.1.9'
#+ terraform version used to execute your code.
terraform_version: '1.1.9'

#. cycloid-toolkit ansible version (required): 'v2.9'
#+ cycloid-toolkit docker image tag to use (https://hub.docker.com/r/cycloid/cycloid-toolkit/tags).
ansible_version: 'v2.9'